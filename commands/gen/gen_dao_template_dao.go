package gen

const templateDaoDaoIndexContent = `
// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"{TplImportPrefix}/dao/internal"
)

// {TplTableNameCamelLowerCase}Dao is the manager for logic model data accessing and custom defined data operations functions management. 
// You can define custom methods on it to extend its functionality as you wish.
type {TplTableNameCamelLowerCase}Dao struct {
	*internal.{TplTableNameCamelCase}Dao
}

var (
	// {TplTableNameCamelCase} is globally public accessible object for table {TplTableName} operations.
	{TplTableNameCamelCase} {TplTableNameCamelLowerCase}Dao
)

func init() {
	{TplTableNameCamelCase} = {TplTableNameCamelLowerCase}Dao{
		internal.New{TplTableNameCamelCase}Dao(),
	}
}

// Fill with you ideas below.

`

const templateDaoDaoInternalContent = `
// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/frame/gmvc"
)

// {TplTableNameCamelCase}Dao is the manager for logic model data accessing and custom defined data operations functions management.
type {TplTableNameCamelCase}Dao struct {
	gmvc.M                                      // M is the core and embedded struct that inherits all chaining operations from gdb.Model.
	C       {TplTableNameCamelLowerCase}Columns // C is the short type for Columns, which contains all the column names of Table for convenient usage.	
	DB      gdb.DB                              // DB is the raw underlying database management object.
	Table   string                              // Table is the underlying table name of the DAO.
}

// {TplTableNameCamelCase}Columns defines and stores column names for table {TplTableName}.
type {TplTableNameCamelLowerCase}Columns struct {
	{TplColumnDefine}
}

// New{TplTableNameCamelCase}Dao creates and returns a new DAO object for table data access.
func New{TplTableNameCamelCase}Dao() *{TplTableNameCamelCase}Dao {
    columns := {TplTableNameCamelLowerCase}Columns{
		{TplColumnNames}
	}
	return &{TplTableNameCamelCase}Dao{
		C: 	   columns,
		M:     g.DB("{TplGroupName}").Model("{TplTableName}").Safe(),
		DB:    g.DB("{TplGroupName}"),
		Table: "{TplTableName}",
	}
}
`
